from .airflow.dags.image_preprocessing_dag import run_image_pre_processing
from kafka.kafka_producer import *
from kafka.kafka_consumer import *
import uuid
from rest_framework.response import Response
import cv2
from subprocess import run
import os
from django.http import JsonResponse
from tempfile import NamedTemporaryFile
from django.views.decorators.csrf import csrf_exempt

KAFKA_TOPIC = "video_data"

def preprocess_image(request, frame_data):
    try:
        run_image_pre_processing(frame_data)
    except:
        print("Image preprocessing failed")

def send_video_data_to_kafka(request, video_data):
    """
    API Endpoint to send data to Kafka topic "video_data"
    Logs error in the event of failure to send to kafka
    
    Args:
        video_data: the Blob URL for video data to be loaded and sent to Kafka Topic
    """
    try:
        key = str(uuid.uuid4())
        send_to_kafka(KAFKA_TOPIC, key, video_data)
    except Exception as e:
        return Response({"error": str(e)}, status=404)

@csrf_exempt
def send_video_data_to_ai_model(request):
    """
    API Endpoint to send data to AI Model for analysis.
    """
    if request.method == "POST":
        try:
            # Step 1: Validate and Get Video Blob
            if 'video_blob' not in request.FILES:
                return JsonResponse({"error": "No video_blob file found in the request."}, status=400)
            
            video_file = request.FILES['video_blob']
            
            # Step 2: Save Blob Temporarily
            with NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
                for chunk in video_file.chunks():
                    temp_video.write(chunk)
                temp_video_path = temp_video.name
            
            # Step 3: Process the Video Data
            ai_results = process_video_data(temp_video_path)

            # Step 4: Clean up Temp File
            os.remove(temp_video_path)

            # Step 5: Return Results
            return JsonResponse({"results": ai_results})
        
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)
    else:
        return JsonResponse({"error": "Invalid request method. Only POST allowed."}, status=405)

def process_video_data(video_path):
    """
    Process video data, run through FCN-LectureNet, and extract features.
    Args:
        video_path: Path to the video file.
    Returns:
        JSON containing processed AI results.
    """
    frames_dir = "./frames"
    os.makedirs(frames_dir, exist_ok=True)
    extract_frames(video_path, frames_dir)

    config_path = "config/FCN_LectureNet.conf"
    run(["python", "pre_ST3D_v3.0_01_binarize.py", config_path, frames_dir])

    run(["python", "pre_ST3D_v3.0_02_cc_analysis.py", config_path, frames_dir])

    run(["python", "pre_ST3D_v3.0_04_vid_segmentation.py", config_path, frames_dir])

    ai_results = send_to_ai_model(frames_dir)

    return ai_results

def extract_frames(video_path, frames_dir, fps=1):
    """
    Extract frames from the video at specified FPS.
    """
    cap = cv2.VideoCapture(video_path)
    frame_rate = cap.get(cv2.CAP_PROP_FPS)
    interval = int(frame_rate / fps)

    count = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        if count % interval == 0:
            frame_path = os.path.join(frames_dir, f"frame_{count}.jpg")
            cv2.imwrite(frame_path, frame)
        count += 1

    cap.release()

def send_to_ai_model(frames_dir):
    """
    Mock function to simulate sending frames to the AI model.
    """
    # Simulate AI model output
    return {
        "summary": "This is a mock summary generated by the AI model."
    }
